// <auto-generated />
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(TestDbContext))]
    [Migration("20241101104346_InitCreate")]
    partial class InitCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.TestEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Курс призначений для студентів, які хочуть глибше зануритися в мову C#.",
                            TimeLimit = 100,
                            Title = "Поглиблене вивчення C#"
                        },
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Цей курс знайомить студентів з основами програмування, використовуючи C#.",
                            TimeLimit = 120,
                            Title = "Вступ до програмування"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TestQuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestsQuestion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "Що таке змінна в C#?",
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            QuestionText = "Яка з цих конструкцій є циклом у C#?",
                            TestId = 1
                        },
                        new
                        {
                            Id = 3,
                            QuestionText = "Що таке клас у об'єктно-орієнтованому програмуванні?",
                            TestId = 1
                        },
                        new
                        {
                            Id = 4,
                            QuestionText = "Що таке алгоритм?",
                            TestId = 2
                        },
                        new
                        {
                            Id = 5,
                            QuestionText = "Яка структура даних є найкращою для реалізації стеку?",
                            TestId = 2
                        },
                        new
                        {
                            Id = 6,
                            QuestionText = "Що таке складність алгоритму?",
                            TestId = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.TestQuestionEntity", b =>
                {
                    b.HasOne("Domain.Entities.TestEntity", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Domain.Entities.TestEntity", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
